<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Playbooks on Replicated Help Center</title>
    <link>/docs/playbooks/</link>
    <description>Recent content in Playbooks on Replicated Help Center</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Replicated, Inc</copyright>
    <lastBuildDate>Wed, 02 May 2018 04:02:20 +0000</lastBuildDate>
    
	<atom:link href="/docs/playbooks/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kubernetes and Airgap</title>
      <link>/docs/playbooks/airgap-kubernetes/</link>
      <pubDate>Wed, 02 May 2018 01:19:20 +0000</pubDate>
      
      <guid>/docs/playbooks/airgap-kubernetes/</guid>
      <description>Kubernetes and Airgap  When distributing a Kubernetes (or Helm) application using Replicated Ship, there will be a running Kubernetes cluster to deploy to. Enterprise Kubernetes clusters that are used for internal applications can be installed and operated in airgapped environments. An airgap cluster is any cluster that doesn&amp;rsquo;t have outbound Internet access, and therefore cannot pull the application images from a Docker registry.
The recommended way to deploy applications to airgap clusters is to require a Docker registry that&amp;rsquo;s already running in the customer environment.</description>
    </item>
    
    <item>
      <title>Docker Registries</title>
      <link>/docs/playbooks/registry-kubernetes/</link>
      <pubDate>Wed, 02 May 2018 01:19:20 +0000</pubDate>
      
      <guid>/docs/playbooks/registry-kubernetes/</guid>
      <description>Shipping a Docker Registry for airgap installations  When distributing a Kubernetes (or Helm) application, most customers will be able to provide a Docker registry that required application images can be pushed to. Replicated Ship can retag and rewrite the Kubernetes YAML to work in this scenario.
If the Kubernetes cluster ] was set up using the Replicated Kubernetes installer, a Docker registry might not be available. The Replicated Kubernetes installer will pre-pull the registry:2 image on all nodes in the cluster.</description>
    </item>
    
    <item>
      <title>Troubleshoot A Kubernetes Application</title>
      <link>/docs/playbooks/support-kubernetes/</link>
      <pubDate>Wed, 02 May 2018 01:19:20 +0000</pubDate>
      
      <guid>/docs/playbooks/support-kubernetes/</guid>
      <description>Troubleshooting a Kubernetes Application  When distributing a Kubernetes (or Helm) application, things may sometimes go wrong with getting your app running in your end customer&amp;rsquo;s installation environment. A few examples:
 They may be running an incompatible kubernetes version They may be short on resources like CPU or Memory There may be networking restrictions that are keeping your app components from communicating  No matter what the issue is, you&amp;rsquo;ll likely need to collect logs, workload statuses, and other information about the installation environment in order to help get your end customer up and running.</description>
    </item>
    
    <item>
      <title>Generating Random Passwords</title>
      <link>/docs/playbooks/random-passwords/</link>
      <pubDate>Wed, 02 May 2018 01:19:20 +0000</pubDate>
      
      <guid>/docs/playbooks/random-passwords/</guid>
      <description>Managing Persistent Random Strings  When distributing an applications, it can be useful to generate passwords as part of the bootstrap process. For example, if your app bundles an SQL database, you&amp;rsquo;ll want to set a password on this database, and allow other application components to use that password to access the data. This can be done through the use of a hidden, mutable string value and the RandomString template function.</description>
    </item>
    
  </channel>
</rss>