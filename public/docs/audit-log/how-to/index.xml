<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Audit Logging Basics on Replicated Help Center</title>
    <link>/docs/audit-log/how-to/</link>
    <description>Recent content in Audit Logging Basics on Replicated Help Center</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Replicated, Inc</copyright>
    <lastBuildDate>Sun, 03 Jul 2016 04:02:20 +0000</lastBuildDate>
    
	<atom:link href="/docs/audit-log/how-to/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Audit Logging Basics</title>
      <link>/docs/audit-log/how-to/basics/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/audit-log/how-to/basics/</guid>
      <description>An audit log is a centralized stream of all user activity in an application.
An audit log event is a single line that represents an action that an actor took, most often on a target.
Sometimes it&amp;rsquo;s easiest to think about this with a concrete example. Let&amp;rsquo;s consider a multi-user, collaborative spreadsheet application.
Actors An actor in the spreadsheet application is any authenticated identity that&amp;rsquo;s interacting with the spreadsheet. This includes the users who are logged in and editing, deleting, and creating new spreadsheets.</description>
    </item>
    
    <item>
      <title>Immutability</title>
      <link>/docs/audit-log/how-to/immutable/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/audit-log/how-to/immutable/</guid>
      <description>A fundamental tenant of any audit log is that it must be absolutely immutable. Once an event has occured, it must always be recorded and there must be no possible way to alter this event.</description>
    </item>
    
    <item>
      <title>Time Synchronization</title>
      <link>/docs/audit-log/how-to/time-sync/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/audit-log/how-to/time-sync/</guid>
      <description>A good audit log should record a synchronized timestamp that allows an end customer to determine with a high level of confidence:
 The human-readable time an event occured,for example: &amp;ldquo;sheet.create occurred at 2017-01-01 17:45:22.011&amp;rdquo; The ordering of events, for example: &amp;ldquo;sheet.create occured before sheet.update&amp;rdquo;  Wall Time vs. Causal Ordering It&amp;rsquo;s not always possible to have both a human-readable &amp;ldquo;wall time&amp;rdquo; and a causally consistent sequencing of events. When forced to trade between a human-readable wall time and a causally consistent sequencing of events, an Audit Log should favor causal consistency over a precise wall time.</description>
    </item>
    
    <item>
      <title>Searchability</title>
      <link>/docs/audit-log/how-to/searchable/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/audit-log/how-to/searchable/</guid>
      <description>A good Audit log needs to be searchable. Proper indexing on actors, actions, and targets is essential to being able to isolate and drill down into the history of application objects and events.</description>
    </item>
    
    <item>
      <title>Exportability</title>
      <link>/docs/audit-log/how-to/exportable/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/audit-log/how-to/exportable/</guid>
      <description>Most users of audit logs will want to connect it into systems that aggregate audit logs from different systems (such as Splunk).</description>
    </item>
    
    <item>
      <title>Segments</title>
      <link>/docs/audit-log/how-to/segments/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/audit-log/how-to/segments/</guid>
      <description>Project A project represents a distinct application offered by a vendor. A vendor that only offers a single application, such as spreadsheets, would only need one project, while a vendor offering spreadsheets and calendars would have two projects. You can find your project IDs on the Settings page of the admin site.
Environment An environment represents a deployment target for a project. Retraced generates Production and Staging environments for each new project.</description>
    </item>
    
    <item>
      <title>Actions</title>
      <link>/docs/audit-log/how-to/actions/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/audit-log/how-to/actions/</guid>
      <description>Actions are the events that the actors performed that should be audited. In the spreadsheet example application, some of the most obvious actions might include sheet.create and sheet.delete. Sometimes it&amp;rsquo;s important to create new objects to wrap events. For example, if a user is editing a spreadsheet and the sheet saves every second, you don&amp;rsquo;t want to create a sheet.update event each second. Wrap these events into a session and create a single sheet.</description>
    </item>
    
    <item>
      <title>Actors</title>
      <link>/docs/audit-log/how-to/actors/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/audit-log/how-to/actors/</guid>
      <description>An actor in the spreadsheet application is any authenticated identity that&amp;rsquo;s interacting with the spreadsheet. This includes the users who are logged in and editing, deleting, and creating new spreadsheets. It also includes any API tokens that are performing operations on the spreadsheets programatically.</description>
    </item>
    
    <item>
      <title>Targets</title>
      <link>/docs/audit-log/how-to/targets/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/audit-log/how-to/targets/</guid>
      <description>Targets are the objects in a system that have an action taken on them. In the spreadsheet example application, the primary target is the sheets themselves. But there are additional, less obvious targets. If the sheet application has implemented itâ€™s own authentication system, another target is the user accounts. For example, when a user changes their password, it should create an audit event for password.update.</description>
    </item>
    
  </channel>
</rss>