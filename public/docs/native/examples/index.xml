<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Native Scheduler Examples on Replicated Help Center</title>
    <link>/docs/native/examples/</link>
    <description>Recent content in Native Scheduler Examples on Replicated Help Center</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Replicated, Inc</copyright>
    <lastBuildDate>Sun, 03 Jul 2016 04:02:20 +0000</lastBuildDate>
    
	<atom:link href="/docs/native/examples/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Native Scheduler Examples</title>
      <link>/docs/native/examples/overview/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/native/examples/overview/</guid>
      <description>This section contains examples of shipping an application in Replicated using the Native Scheduler.
 Counter App: A simple example of an app that has nginx and redis using the Native Scheduler Load Balancer: Adding a load balancer to the counter app example Every Component Option: An example of a single container in the Native Scheduler that has every possible option set in YAML  </description>
    </item>
    
    <item>
      <title>Load Balancer</title>
      <link>/docs/native/examples/load-balancer/</link>
      <pubDate>Sat, 06 Jan 2018 01:19:20 +0000</pubDate>
      
      <guid>/docs/native/examples/load-balancer/</guid>
      <description>Load-Balanced Counter App This example runs multiple instances of the counter app on separate nodes. An nginx container serves as a load balancer to the backend counter containers.
name: Load-Balanced Counter App replicated_api_version: 2.15.0 version: &amp;quot;1.0&amp;quot; release_notes: The initial release of my load-balanced counter application. properties: app_url: http://{{repl ConfigOption &amp;quot;hostname&amp;quot; }} logo_url: &amp;quot;&amp;quot; # TODO: customer_files console_title: My Counter App Console backup: enabled: false cmds: - name: host_ip cmd: publicip args: [] components: - name: DB containers: - source: public image_name: redis version: latest cmd: &amp;quot;[\&amp;quot;redis-server\&amp;quot;, \&amp;quot;--appendonly\&amp;quot;, \&amp;quot;yes\&amp;quot;]&amp;quot; publish_events: - name: Container redis started trigger: container-start data: &amp;quot;&amp;quot; subscriptions: - component: Counter container: freighter/counter action: start config_files: [] customer_files: [] env_vars: [] ports: [] volumes: - host_path: /data container_path: /data options: [&amp;quot;Z&amp;quot;] support_files: [] restart: policy: on-failure max: 1000 - name: Load Balancer containers: - source: public image_name: nginx version: latest cmd: &amp;quot;&amp;quot; publish_events: - name: Container nginx started trigger: container-start data: &amp;quot;&amp;quot; subscriptions: [] config_files: - filename: /etc/nginx/conf.</description>
    </item>
    
    <item>
      <title>Every Component Option</title>
      <link>/docs/native/examples/every-component-option/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/native/examples/every-component-option/</guid>
      <description>Every Component Option This is an example YAML using every possible option on the native components specification.
components: - name: Worker tags: [&amp;quot;Worker&amp;quot;] conflicts: [&amp;quot;API&amp;quot;] cluster: true cluster_host_count: strategy: autoscale min: 1 max: 10 threshold_healthy: 2 threshold_degraded: 1 host_requirements: cpu_cores: 4 cpu_mhz: 2000 memory: 4GB disk_space: 10GB logs: max_size: &amp;quot;10m&amp;quot; max_files: &amp;quot;3&amp;quot; host_volumes: - host_path: /tmp/worker owner: &amp;quot;0&amp;quot; permission: &amp;quot;0600&amp;quot; is_ephemeral: &amp;quot;true&amp;quot; is_excluded_from_backup: &amp;quot;true&amp;quot; min_disk_space: 10GB containers: - source: replicated image_name: worker version: 1.</description>
    </item>
    
    <item>
      <title>Counter App</title>
      <link>/docs/native/examples/counter-app/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/native/examples/counter-app/</guid>
      <description>Counter App This is an example of a general-purpose Replicated app definition. You can use this app as a template for your own, as it covers the basic functionality of the Replicated platform.
View the example-counter project on GitHub
# My Counter App version 1.0 --- replicated_api_version: 1.0.0 name: My Counter App version: &amp;quot;1.0&amp;quot; release_notes: The initial release of my counter application. properties: app_url: http://{{repl ConfigOption &amp;quot;hostname&amp;quot; }} logo_url: &amp;quot;&amp;quot; # TODO: customer_files console_title: My Counter App Console backup: enabled: false cmds: - name: host_ip cmd: publicip args: [] components: - name: DB containers: - source: public image_name: redis version: latest cmd: &amp;quot;[\&amp;quot;redis-server\&amp;quot;, \&amp;quot;--appendonly\&amp;quot;, \&amp;quot;yes\&amp;quot;]&amp;quot; publish_events: - name: Container redis started trigger: container-start data: &amp;quot;&amp;quot; subscriptions: - component: App container: freighter/counter action: start config_files: [] customer_files: [] env_vars: [] ports: [] volumes: - host_path: /data container_path: /data options: [&amp;quot;Z&amp;quot;] support_files: [] restart: policy: on-failure max: 1000 - name: App containers: - source: public image_name: nginx version: latest cmd: &amp;quot;&amp;quot; publish_events: - name: Container nginx started trigger: container-start data: &amp;quot;&amp;quot; subscriptions: [] config_files: - filename: /etc/nginx/conf.</description>
    </item>
    
    <item>
      <title>Certificate Chain</title>
      <link>/docs/native/examples/certificate-chain/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/native/examples/certificate-chain/</guid>
      <description>Certificate Chain App This app is an example of some of the more advanced features of Replicated.
Using the cert command in your app&amp;rsquo;s YAML definition, you can transparently and easily generate new TLS certificates for customer use in your app. For example, one of your containers may be serving an API via HTTPS for your other containers to consume. Ideally, the communication between the services running in your containers would be encrypted and authenticated.</description>
    </item>
    
  </channel>
</rss>