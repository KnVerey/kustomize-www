<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Packaging An Application on Replicated Help Center</title>
    <link>/docs/native/packaging-an-application/</link>
    <description>Recent content in Packaging An Application on Replicated Help Center</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Replicated, Inc</copyright>
    <lastBuildDate>Sun, 03 Jul 2016 04:02:20 +0000</lastBuildDate>
    
	<atom:link href="/docs/native/packaging-an-application/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Packaging An Application</title>
      <link>/docs/native/packaging-an-application/overview/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/native/packaging-an-application/overview/</guid>
      <description>This section will walk you through creating the first release, and will document all available options you can use when writing an application for the Replicated Native Scheduler.
Replicated will deploy an application that is defined in a YAML manifest. There are several top level keys (sections) of a Replicated YAML. The YAML spec is defined at https://github.com/replicatedhq/libyaml/.
An example, short and valid YAML file for the Replicated Native Scheduler is below.</description>
    </item>
    
    <item>
      <title>Components And Containers</title>
      <link>/docs/native/packaging-an-application/components-and-containers/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/native/packaging-an-application/components-and-containers/</guid>
      <description>The components section of the YAML defines how the containers will be created and started. A component is a group of one or more containers that are guaranteed to run on the same node.
An example of a component using the common options is below. We&amp;rsquo;ve also create an example of a component and container that uses every possible option in our examples.
components: - name: Worker containers: - source: replicated image_name: worker version: 1.</description>
    </item>
    
    <item>
      <title>Container Volumes</title>
      <link>/docs/native/packaging-an-application/volumes/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/native/packaging-an-application/volumes/</guid>
      <description>Container Volumes  The volumes key defines an array of volumes to be created and mounted when using the Replicated Native Scheduler. Only the host_path and container_path keys are required for each volume. When new versions of your container are deployed, the volume will be mounted into the updated container.
Named Volumes: You may create a &amp;ldquo;named&amp;rdquo; volume by providing a host_path without a leading &amp;ldquo;/&amp;rdquo; (ex. host_path: dbdata) which becomes the name of the volume.</description>
    </item>
    
    <item>
      <title>Environment Variables</title>
      <link>/docs/native/packaging-an-application/environment_variables/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/native/packaging-an-application/environment_variables/</guid>
      <description>Container Environment Variables  The 12-factor app encourages the use of environment variables for configuration, and Replicated supports this design pattern. You can specify environment variables, which will be injected into a container when it&amp;rsquo;s created.
Environment variables can be created with static values or customer supplied values.
Environment variables support the Replicated template library.
There is also a flag provided to exclude anything secret from the support bundle.</description>
    </item>
    
    <item>
      <title>Config Files</title>
      <link>/docs/native/packaging-an-application/config-files/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/native/packaging-an-application/config-files/</guid>
      <description>Config Files  Your application may have config files that require dynamic values. These values may be input by the person installing the software, values specific to the environment your application is running in, values created by other containers or read from the embedded license via the License API. To accomplish this, Replicated allows templating of its config values using the Go template language with a repl escape sequence.</description>
    </item>
    
    <item>
      <title>Ports / Networking</title>
      <link>/docs/native/packaging-an-application/ports-and-networking/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/native/packaging-an-application/ports-and-networking/</guid>
      <description>Ports  The Replicated Native Scheduler does not ship with an overlay network. All container-to-container communication has to occur on the host networking stack.
All ports listed in the Dockerfile with the EXPOSE directive will be automatically exposed when started. The Docker runtime will choose a random port, ensuring that there are no conflicts. If you need to specify a specific public (host) port, you can list it here.</description>
    </item>
    
    <item>
      <title>Docker Options</title>
      <link>/docs/native/packaging-an-application/docker-options/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/native/packaging-an-application/docker-options/</guid>
      <description>Docker Options  You may also limit the resources used by your containers with the memory, cpushares and network modes and further secure your containers with security options
Memory and Swap Limit The amount of memory or swap for your container. The format is number|unit where unit may be one of b, k, m or g. By default there is no memory or swap limit and your container can use as much as needed.</description>
    </item>
    
    <item>
      <title>Restart Policies</title>
      <link>/docs/native/packaging-an-application/restart-policies/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/native/packaging-an-application/restart-policies/</guid>
      <description>Restart Policies  The Replicated Native Scheduler will warn if a container stops, but it doesn&amp;rsquo;t take action to reschedule and/or restart a container, by default. You can rely on Docker&amp;rsquo;s built-in restart policies to control this behavior when using the Replicated Native Scheduler.
Optionally, containers can be configured to be restarted automatically. Currently supported restart policies match those supported natively by Docker. If the policy is not specified, the container will never be restarted.</description>
    </item>
    
    <item>
      <title>Starting and Stopping</title>
      <link>/docs/native/packaging-an-application/starting-and-stopping/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/native/packaging-an-application/starting-and-stopping/</guid>
      <description>CMD  It&amp;rsquo;s possible to override the CMD and/or ENTRYPOINT in a container, when using the Replicated Native Scheduler:
- source: public image_name: redis ... entrypoint: &#39;[&amp;quot;redis-server&amp;quot;]&#39; cmd: &#39;[&amp;quot;--appendonly&amp;quot;, &amp;quot;yes&amp;quot;]&#39;   Ready State  You can add a health check that Replicated will poll after your containers have all been started. The purpose of this is to report when your application is fully running and ready to be used.</description>
    </item>
    
    <item>
      <title>Events and Orchestration</title>
      <link>/docs/native/packaging-an-application/events-and-orchestration/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/native/packaging-an-application/events-and-orchestration/</guid>
      <description>Events are provided to help with the startup, orchestration and service discovery between your containers. There are several reasons to use events in your application yaml:
 When one container must be started and in a running state before another container starts When one container depends on the ip address or exposed ports of another container  Replicated provides this functionality in a pub/sub style model. Containers can publish events and list the subscriptions.</description>
    </item>
    
    <item>
      <title>Clustering</title>
      <link>/docs/native/packaging-an-application/clustering/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/native/packaging-an-application/clustering/</guid>
      <description>By default Replicated will start one instance per component and container in your application on a single host. With the addition of clustering your application can optionally leverage multiple hosts as well as multiple instances per host.
See an example of setting up a Cassandra Cluster with Replicated here
 Host Count  The application can be scaled horizontally at the component level by specifying host counts using the cluster_host_count property.</description>
    </item>
    
    <item>
      <title>Template Functions</title>
      <link>/docs/native/packaging-an-application/template-functions/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/native/packaging-an-application/template-functions/</guid>
      <description>Template functions are marked by the double curly bracket + &amp;ldquo;repl&amp;rdquo; escape sequence. They allow for user input to be dynamically inserted into application configuration values. The sequence should be {{repl, not {{ repl.
Template functions that refer to your containers are always addressed in pairs with &amp;ldquo;component name&amp;rdquo; and &amp;ldquo;image name&amp;rdquo;. You should use the full image name as it appears in your container definition.
Go Templates Replicated uses Go&amp;rsquo;s template engine to execute the following functions.</description>
    </item>
    
    <item>
      <title>Support Bundle</title>
      <link>/docs/native/packaging-an-application/support-bundle/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/native/packaging-an-application/support-bundle/</guid>
      <description>A support bundle is an archive that is available for the customer to download via the Support tab of the On-Prem Console or the Replicated CLI.
Contents of the support page can be customized by including markdown in the top-level of the YAML.
replicated_api_version: &amp;quot;2.20.2&amp;quot; name: ELK console_support_markdown: | # Email Us for help: #### support@getelk.com Or don&#39;t, your loss.  The support bundle has a default timeout of 120 seconds, after which only files and commands that have completed will be included in the downloaded bundle.</description>
    </item>
    
    <item>
      <title>Custom Preflight Checks</title>
      <link>/docs/native/packaging-an-application/custom-preflight-checks/</link>
      <pubDate>Thu, 26 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/docs/native/packaging-an-application/custom-preflight-checks/</guid>
      <description>A programmable preflight check is a test that is run before installing and running an application. The test will analyze the system to determine if the environment meets the minimum requirements.
The preflight check may be manually run for an existing installation by visiting https://&amp;lt;your server address&amp;gt;:8800/run-checks
By default, Replicated automatically adds preflight checks for:
   Category Check     OS Linux   Linux Kernel 3.</description>
    </item>
    
    <item>
      <title>Programmable Preflight Checks</title>
      <link>/docs/native/packaging-an-application/programmable-preflight-checks/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/native/packaging-an-application/programmable-preflight-checks/</guid>
      <description>The host requirements section of the yaml gives Replicated the ability to analyze system requirements and warn or prevent the user from proceeding with an installation or upgrade. In addition to host requirements, Replicated has the ability to define fully customizable preflight requirements as of version v2.5.0 . These custom requirements provide flexibility to the point that an arbitrary command can be executed by a vendor provided image. See the commands section below for a full list of commands that may be run including examples.</description>
    </item>
    
    <item>
      <title>Custom Metrics</title>
      <link>/docs/native/packaging-an-application/custom-metrics/</link>
      <pubDate>Sat, 02 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>/docs/native/packaging-an-application/custom-metrics/</guid>
      <description>All Replicated installations come with a StatsD/Graphite/Carbon container that can be used by the application to report data to StatsD. Application YAML can also include optional custom monitors that will be used to display additional charts in Replicated dashboard. Applications can also query Graphite directly.
 Defining Metrics  Add custom_metrics as a root element to the application YAML. The following elements are supported:
 target - This is the full key name for your metric.</description>
    </item>
    
    <item>
      <title>Admin Commands</title>
      <link>/docs/native/packaging-an-application/admin-commands/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/native/packaging-an-application/admin-commands/</guid>
      <description>The admin_commands section allows you to define ad-hoc commands that can be executed inside a running container from the shell.
Note: If you are calling admin commands from a script use the --no-tty flag.
 Executing  $ &amp;lt;shell_alias&amp;gt; &amp;lt;command_alias&amp;gt; &amp;lt;params&amp;gt;  or
$ replicated admin &amp;lt;command_alias&amp;gt; &amp;lt;params&amp;gt;  or
$ docker exec -it replicated replicated admin &amp;lt;command_alias&amp;gt; &amp;lt;params&amp;gt;   Examples  nginx-reload This example admin command will create a shell alias to allow mycli nginx-reload to execute the command service nginx reload inside the running nginx container.</description>
    </item>
    
    <item>
      <title>Application Properties</title>
      <link>/docs/native/packaging-an-application/application-properties/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/native/packaging-an-application/application-properties/</guid>
      <description>The properties section of the YAML allows you to configure properties of the admin console.
Below is an example of the properties section of an application config YAML.
properties: app_url: http://{{repl ConfigOption &amp;quot;hostname&amp;quot; }} logo_url: http://replicated.com/logo.png console_title: My Enterprise Application shell_alias: mycli  Available Properties app_url The URL of your application. A link to this URL will de displayed to the user on the dashboard of the admin console. This field supports template functions and often uses one to determine the hostname or IP address to link to.</description>
    </item>
    
    <item>
      <title>Promote Releases</title>
      <link>/docs/native/packaging-an-application/promote-releases/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/native/packaging-an-application/promote-releases/</guid>
      <description>Every Replicated license points to a Release Channel. When a license is installed, it will pull down and install the release that is currently at the top of its channel. It’s recommended to create customer licenses on the Stable channel, and only promote releases to Stable that are ready for all customers to install.
Once an application is installed, the active instance can be updated by promoting a release to the channel that instance is licensed to (likely Stable).</description>
    </item>
    
    <item>
      <title>Support Bundle (Older Instances)</title>
      <link>/docs/native/packaging-an-application/support-bundle-v1/</link>
      <pubDate>Fri, 17 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/docs/native/packaging-an-application/support-bundle-v1/</guid>
      <description>Default Support Files  By default the Support Bundle V1 will include the following files:
   File Description     /daemon/auditlogs/* Audit log events.   /daemon/commands/date Result of the command date. Print the system date and time.   /daemon/commands/df Result of the command df -al. Report file system disk space usage for the local file systems.   /daemon/commands/df_inodes Result of the command df -ali.</description>
    </item>
    
  </channel>
</rss>