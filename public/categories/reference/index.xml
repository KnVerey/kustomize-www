<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reference on Replicated Help Center</title>
    <link>/categories/reference/</link>
    <description>Recent content in Reference on Replicated Help Center</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Replicated, Inc</copyright>
    <lastBuildDate>Sun, 03 Jul 2016 04:12:27 +0000</lastBuildDate>
    
	<atom:link href="/categories/reference/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Integration API</title>
      <link>/api/integration-api/</link>
      <pubDate>Sun, 03 Jul 2016 04:12:27 +0000</pubDate>
      
      <guid>/api/integration-api/</guid>
      <description>The Integration API is the primary mechanism for developers to integrate their applications with Replicated&amp;rsquo;s management console and APIs.
Accessing the Integration API The Integration API can be accessed by using the $REPLICATED_INTEGRATIONAPI environment variable injected into all application containers. After that, every resource can be used by applications to offer features such as airgap detection, LDAP authentication and syncing support, and update checks.
Giving Users a Good Experience The Integration API is designed to enable application developers to seamlessly give every on-prem user the same experience, regardless of the environment it&amp;rsquo;s in.</description>
    </item>
    
    <item>
      <title>Vendor API</title>
      <link>/api/vendor-api/</link>
      <pubDate>Sun, 03 Jul 2016 04:12:27 +0000</pubDate>
      
      <guid>/api/vendor-api/</guid>
      <description>The Replicated Vendor API is available to create and manage applications, release, customers, licenses, and more.
We publish a swagger spec at https://api.replicated.com/vendor/v1/spec/vendor-api.json. We also have an interactive API console available at https://replicated-vendor-api.readme.io/v1.0/reference
Interacting with the Vendor API requires Finding your API Token and App ID.</description>
    </item>
    
    <item>
      <title>Replicated YAML Schema</title>
      <link>/api/yaml/</link>
      <pubDate>Fri, 15 Sep 2017 19:29:47 +0000</pubDate>
      
      <guid>/api/yaml/</guid>
      <description>Schema The schema is published as a JSONSchema V4 document in the Replicated Lint Repository
The canonical source for all available Replicated YAML options is available at github.com/replicatedhq/libyaml. This is a great reference to look up supported options and learn how different sections fit together.
Additional Linter Rules The following list documents rules that will be applied by the Replicated release editor and the replicated-lint cli.
prop-admincommand-component-exists Admin commands must reference an existing component and container</description>
    </item>
    
    <item>
      <title>Replicated CLI Reference</title>
      <link>/api/replicated-cli/</link>
      <pubDate>Sun, 03 Jul 2016 04:12:27 +0000</pubDate>
      
      <guid>/api/replicated-cli/</guid>
      <description>After installing replicated onto a remote host a CLI is enabled that can be utilized for both management and maintenance. This tool can be especially helpful when debugging issues that can arise if the replicated-ui is not fully installed or working properly.
Source replicated.alias If command not found is displayed when attempting to execute the replicated CLI we will need to source the replicated.alias file.
source /etc/replicated.alias  Version List version of currently running replicated components.</description>
    </item>
    
    <item>
      <title>replicatedctl Reference</title>
      <link>/api/replicatedctl/</link>
      <pubDate>Tue, 13 Feb 2018 18:09:21 +0000</pubDate>
      
      <guid>/api/replicatedctl/</guid>
      <description> replicatedctl Replicated CLI
Synopsis Replicated is a platform to deploy containerized SaaS applications behind a firewall (ie private cloud, private data center etc).
replicatedctl  Options  --host string Replicated API host (default &amp;quot;unix:///var/run/replicated/replicated-cli.sock&amp;quot;)  SEE ALSO  replicatedctl app - Manage apps replicatedctl app-config - Manage app config replicatedctl app-release - Manage app releases replicatedctl console-auth - Manage UI console authentication settings replicatedctl license - Manage the license replicatedctl license-load - Load the license from stdin replicatedctl params - Manage params replicatedctl preflight - View or manage preflight checks replicatedctl snapshot - Manage snapshots replicatedctl support-bundle - Generate a support bundle replicatedctl task - Manage tasks replicatedctl version - Get the Replicated CLI version information  </description>
    </item>
    
    <item>
      <title>Vendor CLI Reference</title>
      <link>/api/replicated-vendor-cli/</link>
      <pubDate>Mon, 23 Oct 2017 10:36:16 -0700</pubDate>
      
      <guid>/api/replicated-vendor-cli/</guid>
      <description>The Replicated Vendor CLI provides a CLI for interacting with the Replicated Vendor API.
CLI Installation MacOS Install brew install replicatedhq/replicated/cli  Linux Install curl -o install.sh -sSL https://raw.githubusercontent.com/replicatedhq/replicated/master/install.sh sudo bash ./install.sh  Setup The Replicated Vendor CLI requires an App ID or app name and an API token. These can either be passed as arguments to each command
replicated channel ls --app my-app-name --token e8d7ce8e3d3278a8b1255237e6310069  or set as environment variables.</description>
    </item>
    
    <item>
      <title>Support Bundle YAML Reference</title>
      <link>/api/support-bundle-yaml/</link>
      <pubDate>Wed, 17 Jan 2018 23:51:55 +0000</pubDate>
      
      <guid>/api/support-bundle-yaml/</guid>
      <description>Support Bundle Replicated&amp;rsquo;s standalone Support Bundle allows you to diagnose problems with any app, deployed any way, anywhere. This is the reference documentation for the Support Bundle YAML syntax.
 Support Bundle Collection Specs allows you to specify which commands to run and files to collect to gather diagnostic info about your on-premise application. Support Bundle Collection Lifecycle allows you to modify the end-customer&amp;rsquo;s experience with custom messaging, automatic analysis of collected files, and more.</description>
    </item>
    
    <item>
      <title>Support Bundle YAML Specs</title>
      <link>/categories/support-bundle-yaml-specs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/categories/support-bundle-yaml-specs/</guid>
      <description>Support Bundle Collection Specs Support Bundle collection specs can be used to define and customize what kinds diagnostic information you want to collect to debug your application. All Support Bundle specs support the following shared parameters:
Required Parameters  output_dir - The directory in the bundle to store the collection results  Optional Parameters  timeout_seconds - An amount of time to allow a collection to run before abandoning it</description>
    </item>
    
    <item>
      <title>Ship YAML Reference</title>
      <link>/api/ship-yaml/</link>
      <pubDate>Wed, 17 Jan 2018 23:51:55 +0000</pubDate>
      
      <guid>/api/ship-yaml/</guid>
      <description>Ship Ship is a flexible workflow tool that allows you to package your application for delivering it as an on-prem application to your customers. This is the reference documentation for the Ship yaml Spec. To get started with ship, check out the Ship Guides
 Ship Assets allow you to define what files and application artifacts should be delivered to end customers Ship Config allows you to define what dynamic configuration options your end customers need to supply to configure your application to run in their on-prem environment.</description>
    </item>
    
  </channel>
</rss>