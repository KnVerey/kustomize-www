<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Packaging a Kubernetes Application on Replicated Help Center</title>
    <link>/categories/packaging-a-kubernetes-application/</link>
    <description>Recent content in Packaging a Kubernetes Application on Replicated Help Center</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Replicated, Inc</copyright>
    <lastBuildDate>Sun, 03 Jul 2016 04:02:20 +0000</lastBuildDate>
    
	<atom:link href="/categories/packaging-a-kubernetes-application/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Config Maps</title>
      <link>/docs/kubernetes/packaging-an-application/config-maps/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/kubernetes/packaging-an-application/config-maps/</guid>
      <description>Config Maps  Config maps are Kubernetes resources that create dynamic text files (often used for config files) mounted in a container. Using the Replicated template functions, it&amp;rsquo;s possible to generate a config map dynamically that includes information generated from config items (user supplied data) or cmds (automatically generated data).</description>
    </item>
    
    <item>
      <title>Ingress Controllers</title>
      <link>/docs/kubernetes/packaging-an-application/ingress/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/kubernetes/packaging-an-application/ingress/</guid>
      <description>Ingress Controllers  If your application contains Kubernetes Ingress, this may require some changes to be compatible with Replicated. Ingress resources are unique in Kubernetes because a cluster must have a functional ingress controller running before an ingress resource type can be deployed.
 Ingress in the Cloud  When running Kubernetes in a cloud provider or in a managed Kubernetes stack such as GKE or Azure Container Service, the cloud provider often deploys and configures an ingress controller into every cluster automatically.</description>
    </item>
    
    <item>
      <title>Packaging An Application</title>
      <link>/docs/kubernetes/packaging-an-application/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/kubernetes/packaging-an-application/</guid>
      <description>Once you have your application packaged and running in Kubernetes,&amp;hellip;</description>
    </item>
    
    <item>
      <title>Secrets</title>
      <link>/docs/kubernetes/packaging-an-application/secrets/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/kubernetes/packaging-an-application/secrets/</guid>
      <description>Secrets  Replicated does not externally manage secrets in Kubernetes clusters, instead being specified and used as part of the application specification. Template functions can be used to dynamically write secrets into a configuration item from config items or commands.
Kubernetes resources are created in the order they appear in the release YAML. Pods that reference secrets will not start until the secret is available. Until the secret is successfully mounted, the pod will stay in the Pending state.</description>
    </item>
    
    <item>
      <title>Support Bundle</title>
      <link>/docs/kubernetes/packaging-an-application/support-bundle/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/kubernetes/packaging-an-application/support-bundle/</guid>
      <description>A support bundle is an archive that is available for the customer to download via the Support tab of the On-Prem Console or the Replicated CLI.
Contents of the support page can be customized by including markdown in the top-level of the YAML.
replicated_api_version: &amp;quot;2.20.2&amp;quot; name: ELK console_support_markdown: | # Email Us for help: #### support@getelk.com Or don&#39;t, your loss.  The support bundle has a default timeout of 120 seconds, after which only files and commands that have completed will be included in the downloaded bundle.</description>
    </item>
    
    <item>
      <title>Template Functions</title>
      <link>/docs/kubernetes/packaging-an-application/template-functions/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/kubernetes/packaging-an-application/template-functions/</guid>
      <description>Template functions are marked by the double curly bracket + &amp;ldquo;repl&amp;rdquo; escape sequence. They allow for user input to be dynamically inserted into application configuration values. The sequence should be {{repl, not {{ repl.
Go Templates Replicated uses Go&amp;rsquo;s template engine to execute the following functions. In addition to the functions listed here, all of the Go template runtime is available. Please note that Go template functions must still be escaped with &amp;ldquo;repl&amp;rdquo; escape sequence as demonstrated below.</description>
    </item>
    
    <item>
      <title>Volumes</title>
      <link>/docs/kubernetes/packaging-an-application/volumes/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/kubernetes/packaging-an-application/volumes/</guid>
      <description>Persistent Volumes  Kubernetes applications often rely on persistent volumes (PVs) and persistent volume claims (PVCs) to manage data. When Replicated creates a Kubernetes appliance, a custom storage class is automatically provisioned that will be available to the application for persistent volumes. No changes are necessary in the application spec, but the Replicated storage class might not have the same characteristics as Kubernetes clusters provisioned by cloud providers</description>
    </item>
    
    <item>
      <title>YAML Overview</title>
      <link>/docs/kubernetes/packaging-an-application/yaml-format/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/kubernetes/packaging-an-application/yaml-format/</guid>
      <description>Replicated will deploy an application that is defined in a YAML spec. We currently support deploying an application that uses the Replicated scheduler or deploying a Kubernetes application. Understanding how each of these will be installed and maintained is an important consideration when choosing the scheduler to use to deploy your application.
 Replicated API Version  At the top of the YAML file, regardless of the scheduler, there must be a Replicated API version.</description>
    </item>
    
    <item>
      <title>Custom Preflight Checks</title>
      <link>/docs/kubernetes/packaging-an-application/custom-preflight-checks/</link>
      <pubDate>Thu, 26 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/docs/kubernetes/packaging-an-application/custom-preflight-checks/</guid>
      <description>A preflight check is a test that is run before installing and running an application. The test will analyze the system to determine if the environment meets the minimum requirements.
The preflight check may be manually run for an existing installation by visiting https://&amp;lt;your server address&amp;gt;:8800/run-checks
By default, Replicated automatically adds preflight checks for:
   Category Check     OS Linux   Linux Kernel 3.10 or greater   Memory 1 GB   Docker Version 1.</description>
    </item>
    
    <item>
      <title>Programmable Preflight Checks</title>
      <link>/docs/kubernetes/packaging-an-application/programmable-preflight-checks/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/kubernetes/packaging-an-application/programmable-preflight-checks/</guid>
      <description>The host requirements section of the yaml gives Replicated the ability to analyze system requirements and warn or prevent the user from proceeding with an installation or upgrade. In addition to host requirements, Replicated has the ability to define fully customizable preflight requirements as of version v2.5.0 . These custom requirements provide flexibility to the point that an arbitrary command can be executed by a vendor provided image. See the commands section below for a full list of commands that may be run including examples.</description>
    </item>
    
    <item>
      <title>Custom Metrics</title>
      <link>/docs/kubernetes/packaging-an-application/custom-metrics/</link>
      <pubDate>Sat, 02 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>/docs/kubernetes/packaging-an-application/custom-metrics/</guid>
      <description>All Replicated installations come with a StatsD/Graphite/Carbon container that can be used by the application to report data to StatsD. Application YAML can also include optional custom monitors that will be used to display additional charts in Replicated dashboard. Applications can also query Graphite directly.
 Defining Metrics  Add custom_metrics as a root element to the application YAML. The following elements are supported:
 target - This is the full key name for your metric.</description>
    </item>
    
    <item>
      <title>Admin Commands</title>
      <link>/docs/kubernetes/packaging-an-application/admin-commands/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/kubernetes/packaging-an-application/admin-commands/</guid>
      <description>The admin_commands section allows you to define ad-hoc commands that can be executed inside a running container from the shell.
Note: If you are calling admin commands from a script use the --no-tty flag.
 Executing  $ kubectl exec -it &amp;quot;$(kubectl get pods -l=app=replicated -l=tier=master -o=jsonpath=&#39;{.items..metadata.name}&#39;)&amp;quot; -c replicated -- replicated admin &amp;lt;command_alias&amp;gt; &amp;lt;params&amp;gt;   Examples  nginx-reload admin_commands: - alias: nginx-reload command: [service, nginx, reload] run_type: exec selector: app: nginx tier: load-balancer role: master  redis-sadd This example admin command will create a shell alias to allow mycli redis-sadd mykey myvalue to execute the command redis-cli sadd mykey myvalue inside the redis container.</description>
    </item>
    
    <item>
      <title>Application Properties</title>
      <link>/docs/kubernetes/packaging-an-application/application-properties/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/kubernetes/packaging-an-application/application-properties/</guid>
      <description>The properties section of the YAML allows you to configure properties of the admin console.
Below is an example of the properties section of an application config YAML.
properties: app_url: http://{{repl ConfigOption &amp;quot;hostname&amp;quot; }} logo_url: http://replicated.com/logo.png console_title: My Enterprise Application shell_alias: mycli  Available Properties app_url The URL of your application. A link to this URL will de displayed to the user on the dashboard of the admin console. This field supports template functions and often uses one to determine the hostname or IP address to link to.</description>
    </item>
    
  </channel>
</rss>