<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Audit Logging Basics on Replicated Help Center</title>
    <link>/categories/audit-logging-basics/</link>
    <description>Recent content in Audit Logging Basics on Replicated Help Center</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Replicated, Inc</copyright>
    <lastBuildDate>Sun, 03 Jul 2016 04:02:20 +0000</lastBuildDate>
    
	<atom:link href="/categories/audit-logging-basics/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Actions</title>
      <link>/docs/audit-log/how-to/actions/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/audit-log/how-to/actions/</guid>
      <description>Actions are the events that the actors performed that should be audited. In the spreadsheet example application, some of the most obvious actions might include sheet.create and sheet.delete. Sometimes it&amp;rsquo;s important to create new objects to wrap events. For example, if a user is editing a spreadsheet and the sheet saves every second, you don&amp;rsquo;t want to create a sheet.update event each second. Wrap these events into a session and create a single sheet.</description>
    </item>
    
    <item>
      <title>Actors</title>
      <link>/docs/audit-log/how-to/actors/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/audit-log/how-to/actors/</guid>
      <description>An actor in the spreadsheet application is any authenticated identity that&amp;rsquo;s interacting with the spreadsheet. This includes the users who are logged in and editing, deleting, and creating new spreadsheets. It also includes any API tokens that are performing operations on the spreadsheets programatically.</description>
    </item>
    
    <item>
      <title>Audit Logging Basics</title>
      <link>/docs/audit-log/how-to/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/audit-log/how-to/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Audit Logging Basics</title>
      <link>/docs/audit-log/how-to/basics/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/audit-log/how-to/basics/</guid>
      <description>An audit log is a centralized stream of all user activity in an application.
An audit log event is a single line that represents an action that an actor took, most often on a target.
Sometimes it&amp;rsquo;s easiest to think about this with a concrete example. Let&amp;rsquo;s consider a multi-user, collaborative spreadsheet application.
Actors An actor in the spreadsheet application is any authenticated identity that&amp;rsquo;s interacting with the spreadsheet. This includes the users who are logged in and editing, deleting, and creating new spreadsheets.</description>
    </item>
    
    <item>
      <title>Embedded Viewer</title>
      <link>/docs/audit-log/getting-started/embedded-viewer/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/audit-log/getting-started/embedded-viewer/</guid>
      <description>Now that you&amp;rsquo;ve sent some events into Retraced, it&amp;rsquo;s time to expose them to your end users. Retraced has an advanced, highly customizable log viewer that you can embed on your own site.
Note: Currently, a React-based site is required to embed the viewer, but support for embedding without React will be available soon.
Installing There are a few short steps to getting the embedded viewer integrated into your site.</description>
    </item>
    
    <item>
      <title>Exportability</title>
      <link>/docs/audit-log/how-to/exportable/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/audit-log/how-to/exportable/</guid>
      <description>Most users of audit logs will want to connect it into systems that aggregate audit logs from different systems (such as Splunk).</description>
    </item>
    
    <item>
      <title>First Audit Log Event</title>
      <link>/docs/audit-log/getting-started/first-event/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/audit-log/getting-started/first-event/</guid>
      <description>Getting started with Retraced is easy. The best way to start is to pick a single event to start sending to confirm that everything is set up right. If your site has a login event, it&amp;rsquo;s a perfect first event because it covers most of the scenarios that can be tricky when starting to audit log. Login events can have both a successful and failed response, it can be anonymous or authenticated and it may or may not belong to a group.</description>
    </item>
    
    <item>
      <title>Immutability</title>
      <link>/docs/audit-log/how-to/immutable/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/audit-log/how-to/immutable/</guid>
      <description>A fundamental tenant of any audit log is that it must be absolutely immutable. Once an event has occured, it must always be recorded and there must be no possible way to alter this event.</description>
    </item>
    
    <item>
      <title>Renaming Properties</title>
      <link>/docs/audit-log/getting-started/renaming-properties/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/audit-log/getting-started/renaming-properties/</guid>
      <description>Some properties of an audit event can be renamed after the event is received. There is a limited amount of these and the original event is still immutable. But data can change over time, and it&amp;rsquo;s important to be able to link to and find events later.
Actor When sending an event, an actor is a required field. The id property of the actor is immutable and is linked and cross referenced in Retraced to make it possible to search for and find all events that a specific actor performed.</description>
    </item>
    
    <item>
      <title>Replicated Audit Log Basics</title>
      <link>/docs/audit-log/getting-started/basics/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/audit-log/getting-started/basics/</guid>
      <description>At it&amp;rsquo;s core, the Replicated Audit Log consists of 3 components:
 The Publisher API, which is used by a vendor application to report audit events to Retraced. A Logs Viewer which can be embedded in the frontend of a vendor application to allow end customers to view, search, and export logs. The Enterprise IT Integration API which be used by end customers to consume audit log events programmatically.  The first step in any Retraced integration is sending an event to the Publisher API.</description>
    </item>
    
    <item>
      <title>Reporting Event Timing</title>
      <link>/docs/audit-log/getting-started/time-synchronization/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/audit-log/getting-started/time-synchronization/</guid>
      <description>Recording Event Timing in Retraced Retraced allows clients to specify a created time for any event. In addition to allowing clients to report event timing, the Retraced Publisher API will record an NTP-synchronized received timestamp for all events.</description>
    </item>
    
    <item>
      <title>Searchability</title>
      <link>/docs/audit-log/how-to/searchable/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/audit-log/how-to/searchable/</guid>
      <description>A good Audit log needs to be searchable. Proper indexing on actors, actions, and targets is essential to being able to isolate and drill down into the history of application objects and events.</description>
    </item>
    
    <item>
      <title>Searching For Events</title>
      <link>/docs/audit-log/getting-started/searching/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/audit-log/getting-started/searching/</guid>
      <description>The Retraced interface supports searching for events. While it&amp;rsquo;s presented as a single, simple input field, the Retraced search interface supports complex structured queries.
Free Text Search By default, the search query you type in the search box will seach all fields for this value.
Structured (Advanced) Search If you use the advanced search syntax, you can perform very specific and exact searches to find the data you are looking for.</description>
    </item>
    
    <item>
      <title>Segments</title>
      <link>/docs/audit-log/how-to/segments/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/audit-log/how-to/segments/</guid>
      <description>Project A project represents a distinct application offered by a vendor. A vendor that only offers a single application, such as spreadsheets, would only need one project, while a vendor offering spreadsheets and calendars would have two projects. You can find your project IDs on the Settings page of the admin site.
Environment An environment represents a deployment target for a project. Retraced generates Production and Staging environments for each new project.</description>
    </item>
    
    <item>
      <title>Targets</title>
      <link>/docs/audit-log/how-to/targets/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/audit-log/how-to/targets/</guid>
      <description>Targets are the objects in a system that have an action taken on them. In the spreadsheet example application, the primary target is the sheets themselves. But there are additional, less obvious targets. If the sheet application has implemented itâ€™s own authentication system, another target is the user accounts. For example, when a user changes their password, it should create an audit event for password.update.</description>
    </item>
    
    <item>
      <title>Time Synchronization</title>
      <link>/docs/audit-log/how-to/time-sync/</link>
      <pubDate>Sun, 03 Jul 2016 04:02:20 +0000</pubDate>
      
      <guid>/docs/audit-log/how-to/time-sync/</guid>
      <description>A good audit log should record a synchronized timestamp that allows an end customer to determine with a high level of confidence:
 The human-readable time an event occured,for example: &amp;ldquo;sheet.create occurred at 2017-01-01 17:45:22.011&amp;rdquo; The ordering of events, for example: &amp;ldquo;sheet.create occured before sheet.update&amp;rdquo;  Wall Time vs. Causal Ordering It&amp;rsquo;s not always possible to have both a human-readable &amp;ldquo;wall time&amp;rdquo; and a causally consistent sequencing of events. When forced to trade between a human-readable wall time and a causally consistent sequencing of events, an Audit Log should favor causal consistency over a precise wall time.</description>
    </item>
    
  </channel>
</rss>